/*
 * Copyright (C) 2025 - FLtube
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License, version 3, as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0404

#include "../include/FLTube_View.h"
#include <libintl.h>
#ifndef gettext_noop
#  define gettext_noop(text) text
#endif
#ifndef GETTEXT_MACROS_H
#endif

FLTubeMainWindow::FLTubeMainWindow(int X, int Y, int W, int H, const char *L) :
  Fl_Double_Window(X, Y, W, H, L)
{
  _FLTubeMainWindow();
}

FLTubeMainWindow::FLTubeMainWindow(int W, int H, const char *L) :
  Fl_Double_Window(0, 0, W, H, L)
{
  clear_flag(16);
  _FLTubeMainWindow();
}

FLTubeMainWindow::FLTubeMainWindow() :
  Fl_Double_Window(0, 0, 593, 540, "FLTube")
{
  clear_flag(16);
  _FLTubeMainWindow();
}

void FLTubeMainWindow::_FLTubeMainWindow() {
  this->box(FL_FLAT_BOX);
  this->color(FL_BACKGROUND_COLOR);
  this->selection_color(FL_BACKGROUND_COLOR);
  this->labeltype(FL_NO_LABEL);
  this->labelfont(0);
  this->labelsize(14);
  this->labelcolor(FL_FOREGROUND_COLOR);
  this->align(Fl_Align(FL_ALIGN_TOP));
  this->when(FL_WHEN_RELEASE);
  { Fl_Group* o = new Fl_Group(10, 35, 575, 85, _("Search box:"));
    o->box(FL_UP_FRAME);
    o->labelfont(1);
    o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    { search_term_or_url = new Fl_Input(46, 59, 512, 24, _("Term or URL"));
      search_term_or_url->tooltip(_("Enter a search term for search or a valid Youtube URL."));
      search_term_or_url->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Input* search_term_or_url
    { do_search_bttn = new Fl_Button(227, 88, 150, 22, _("Go &search!"));
      do_search_bttn->tooltip(_("If search by URL, it must be a complete one (i.e. https://youtu.be/12345)..."));
      do_search_bttn->user_data((void*)(search_term_or_url));
    } // Fl_Button* do_search_bttn
    o->end();
  } // Fl_Group* o
  { search_result_selectors = new Fl_Group(10, 126, 575, 380);
    search_result_selectors->box(FL_THIN_UP_BOX);
    search_result_selectors->end();
  } // Fl_Group* search_result_selectors
  { pagination_controls = new Fl_Group(9, 508, 577, 30);
    { previous_results_bttn = new Fl_Button(10, 510, 135, 23, _("<&Previous"));
      previous_results_bttn->tooltip(_("Get previous results of current search results set."));
    } // Fl_Button* previous_results_bttn
    { next_results_bttn = new Fl_Button(450, 510, 135, 23, _("&Next>"));
      next_results_bttn->tooltip(_("Get following results of current search results set."));
    } // Fl_Button* next_results_bttn
    pagination_controls->end();
  } // Fl_Group* pagination_controls
  end();
}

VideoInfo::VideoInfo(int X, int Y, int W, int H, const char *L) :
  Fl_Group(0, 0, W, H, L)
{
  { thumbnail = new Fl_Button(6, 5, 95, 80);
    thumbnail->tooltip(_("Click to stream the video (preview it)..."));
  } // Fl_Button* thumbnail
  { views_spectators = new Fl_Box(110, 45, 110, 20);
    views_spectators->tooltip(_("Total video views, or if live current count of concurrent spectators."));
    views_spectators->align(Fl_Align(356|FL_ALIGN_INSIDE));
  } // Fl_Box* views_spectators
  { is_live_image = new Fl_Box(220, 45, 40, 20);
    is_live_image->tooltip(_("The video is live."));
    is_live_image->align(Fl_Align(288));
    is_live_image->hide();
  } // Fl_Box* is_live_image
  { title = new Fl_Box(105, 6, 450, 37);
    title->labelfont(1);
    title->align(Fl_Align(197|FL_ALIGN_INSIDE));
  } // Fl_Box* title
  { duration = new Fl_Box(110, 65, 70, 20);
    duration->tooltip(_("Duration expressed as H:MM:SS."));
    duration->labelfont(2);
    duration->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  } // Fl_Box* duration
  { uploadDate = new Fl_Box(190, 65, 95, 20);
    uploadDate->tooltip(_("Video upload date."));
    uploadDate->labelfont(2);
    uploadDate->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  } // Fl_Box* uploadDate
  { userUploader = new Fl_Button(295, 65, 260, 20);
    userUploader->tooltip(_("Click to list all channel\'s video."));
    userUploader->labelfont(2);
    userUploader->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  } // Fl_Button* userUploader
  end();
  position(X, Y);
}

TinyMessageWindow::TinyMessageWindow(int X, int Y, int W, int H, const char *L) :
  Fl_Double_Window(X, Y, W, H, L)
{
  _TinyMessageWindow();
}

TinyMessageWindow::TinyMessageWindow(int W, int H, const char *L) :
  Fl_Double_Window(0, 0, W, H, L)
{
  clear_flag(16);
  _TinyMessageWindow();
}

TinyMessageWindow::TinyMessageWindow() :
  Fl_Double_Window(0, 0, 649, 100, "Error")
{
  clear_flag(16);
  _TinyMessageWindow();
}

void TinyMessageWindow::_TinyMessageWindow() {
  this->box(FL_FLAT_BOX);
  this->color(FL_BACKGROUND_COLOR);
  this->selection_color(FL_BACKGROUND_COLOR);
  this->labeltype(FL_NO_LABEL);
  this->labelfont(0);
  this->labelsize(14);
  this->labelcolor(FL_FOREGROUND_COLOR);
  this->align(Fl_Align(FL_ALIGN_TOP));
  this->when(FL_WHEN_RELEASE);
  { error_label = new Fl_Box(30, 15, 590, 45);
    error_label->align(Fl_Align(FL_ALIGN_WRAP));
  } // Fl_Box* error_label
  { close_bttn = new Fl_Button(267, 70, 115, 25, _("Close and exit"));
    close_bttn->shortcut(FL_ALT|'c');
  } // Fl_Button* close_bttn
  set_modal();
  end();
}

TinyChoiceWindow::TinyChoiceWindow(int X, int Y, int W, int H, const char *L) :
  Fl_Double_Window(X, Y, W, H, L)
{
  _TinyChoiceWindow();
}

TinyChoiceWindow::TinyChoiceWindow(int W, int H, const char *L) :
  Fl_Double_Window(0, 0, W, H, L)
{
  clear_flag(16);
  _TinyChoiceWindow();
}

TinyChoiceWindow::TinyChoiceWindow() :
  Fl_Double_Window(0, 0, 649, 118, "Warn")
{
  clear_flag(16);
  _TinyChoiceWindow();
}

void TinyChoiceWindow::_TinyChoiceWindow() {
  this->box(FL_FLAT_BOX);
  this->color(FL_BACKGROUND_COLOR);
  this->selection_color(FL_BACKGROUND_COLOR);
  this->labeltype(FL_NO_LABEL);
  this->labelfont(0);
  this->labelsize(14);
  this->labelcolor(FL_FOREGROUND_COLOR);
  this->align(Fl_Align(FL_ALIGN_TOP));
  this->when(FL_WHEN_RELEASE);
  { choice_label = new Fl_Box(30, 15, 590, 45);
    choice_label->align(Fl_Align(FL_ALIGN_WRAP));
  } // Fl_Box* choice_label
  { accept_bttn = new Fl_Button(180, 85, 115, 25, _("Accept"));
    accept_bttn->shortcut(FL_ALT|'a');
  } // Fl_Button* accept_bttn
  { cancel_bttn = new Fl_Button(334, 85, 115, 25, _("Cancel"));
    cancel_bttn->shortcut(FL_ALT|'c');
  } // Fl_Button* cancel_bttn
  { warnme_again_check = new Fl_Check_Button(30, 60, 590, 20, _("Don\'t warn me again and ACCEPT always."));
    warnme_again_check->tooltip(_("Check if don\'t want to be warn again, assuming all risks."));
    warnme_again_check->down_box(FL_DOWN_BOX);
    warnme_again_check->labelfont(2);
    warnme_again_check->labelsize(12);
  } // Fl_Check_Button* warnme_again_check
  set_modal();
  end();
}
